language: c

compiler:
  - gcc

git:
  depth: false

osx_image: xcode11.4

os: linux
dist: bionic

jobs:
  include:
    # Linux
    - env: TARGET=x86_64-unknown-linux-gnu
      arch: amd64
    - env: TARGET=powerpc64le-unknown-linux-gnu
      arch: ppc64le
    # - env: TARGET=arm64-unknown-linux-gnueabi
    #   arch: arm64

    # OSX
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu
      os: windows

before_script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]];
    then
      sudo add-apt-repository ppa:deadsnakes/ppa -y;
      sudo add-apt-repository ppa:duggan/bats -y;

      sudo apt-get install bats valgrind python2.{3..7} python3.{3..8} -y;

      autoreconf --install;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
      brew install python || brew upgrade python;
      brew install python@3.8            || true;
      brew install bats-core;
      brew cask install anaconda         || true;
    fi
    # brew install --HEAD valgrind       || true;

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]];
    then
      powershell Install-WindowsFeature Net-Framework-Core;
      cinst -y wixtoolset;
    fi

script:
  - echo $TRAVIS_OS_NAME -- $TARGET

  - if [[ "$TARGET" == "x86_64-unknown-linux-gnu" ]];
    then
      ./configure &&
      make &&
      sudo make check;

      test -f /tmp/austin_tests.log && cat /tmp/austin_tests.log;
    fi

  # - if [[ "$TARGET" == "arm64-unknown-linux-gnueabi" ]];
  #   then
  #     gcc -O3 -Os -Wall -pthread src/*.c -o src/austin;
  #     which bats && sudo bats test/test.bats || src/austin -V;
  #   fi

  - if [[ "$TARGET" == "powerpc64le-unknown-linux-gnu" ]];
    then
      ./configure &&
      make;
      which bats && sudo bats test/test.bats || src/austin -V;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "osx"     ]];
    then
      gcc -Wall -O3 -Os -o src/austin src/*.c &&
      sudo bats test/macos/test.bats;

      test -f /tmp/austin_tests.log && cat /tmp/austin_tests.log;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]];
    then
      gcc -s -Wall -O3 -Os -o src/austin src/*.c -lpsapi;
    fi

after_success:
  ./src/austin -V;
  ./src/austin --usage

after_failure:
  - if [[ "$TRAVIS_OS_NAME" == "linux"   ]];
    then
      test -f /var/log/syslog.log && cat /var/log/syslog.log | grep austin;
      test -f test-suite.log      && cat test-suite.log;
    fi

before_deploy:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
      SED_FLAGS="-n -E";
    else
      SED_FLAGS="-r -n";
    fi;
    export VERSION=$(cat src/austin.h | sed $SED_FLAGS "s/.*VERSION[ ]+\"(.+)\"/\1/p");

  # - export TRAVIS_TAG=v$VERSION

  - echo "==== Preparing to create GitHub Release for version $VERSION ===="

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]];
    then
      export ZIP_CMD="tar -Jcf";
      export ZIP_SUFFIX="linux-${TARGET%%-*}.tar.xz";
      export AUSTIN_EXE=austin;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
      export ZIP_CMD="zip -r";
      export ZIP_SUFFIX="mac-${TARGET%%-*}.zip";
      export AUSTIN_EXE=austin;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]];
    then
      export ZIP_CMD="7z a -tzip";
      export ZIP_SUFFIX="win-${TARGET%%-*}.zip";
      export AUSTIN_EXE=austin.exe;

      export WIN_MSI="austin-$VERSION-win64.msi";

      git checkout "packaging/msi";
      git checkout master;
      git checkout "packaging/msi" -- wix;

      sed -i "s/%VERSION%/$VERSION/g" wix/Austin.wxs;
      export PATH="/c/Program Files (x86)/`ls /c/Program\ Files\ \(x86\) | grep \"[wW]i[xX] [tT]oolset\"`/bin:$PATH";
      cd wix;
      candle Austin.wxs -out Austin.wixobj;
      light -ext WixUIExtension Austin.wixobj -out $WIN_MSI;
      cd .. ;
      mv wix/$WIN_MSI src/$WIN_MSI;
      test -f src/$WIN_MSI && echo ">> Windows MSI installer at src/$WIN_MSI" || echo ">> ERROR No Windows MSI installer generated.";
    fi

  - export ARTEFACT="austin-${VERSION}-${ZIP_SUFFIX}"

  - echo ">> Using command $ZIP_CMD to create artefact $ARTEFACT"

  - cd src
  - $ZIP_CMD $ARTEFACT $AUSTIN_EXE
  - echo ">> Generated artefact" $(ls $ARTEFACT)

  - git config --local user.name "Gabriele N. Tornetta"
  - git config --local user.email ${GITHUB_EMAIL}
  - git tag -a -f -m "Release $VERSION" $TRAVIS_TAG

deploy:
  - provider: releases
    edge: true
    token: $GITHUB_TOKEN
    file:
      - $ARTEFACT
      - $WIN_MSI
    overwrite: true
    on:
      tags: true

  # - provider: releases
  #   edge: true
  #   token: $GITHUB_TOKEN
  #   file: $WIN_MSI
  #   overwrite: true
  #   on:
  #     condition: "$TRAVIS_OS_NAME = windows"

after_deploy:
  - cd ..
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]];
    then
      export WIN_MSI_HASH=$( sha256sum src/$WIN_MSI | head -c 64 );

      git checkout "packaging/msi" -- choco;

      cd choco;

      sed -i "s/%WIN_MSI_HASH%/$WIN_MSI_HASH/g" tools/chocolateyinstall.ps1;
      /bin/find . -type f -exec sed -i "s/%VERSION%/$VERSION/g" {} \; ;
      choco apikey --key $CHOCO_APIKEY --source https://push.chocolatey.org/;
      choco pack;
      choco push;
      cd .. ;
    fi
